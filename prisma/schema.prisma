// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @db.VarChar(100) @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?    @db.VarChar(80)
  image         String?    @db.VarChar(500)
  personId      Int        @map("person_id")

  person        Person     @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRoles     UserRole[]
  sessions      Session[]

  @@map("user")
}

model UserRole {
  userId Int  @map("user_id")
  role   Role

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, role])
  @@map("user_role")
}

model Session {
  sessionToken String   @db.Uuid @id @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
 
  @@map("session")
}
 
model VerificationToken {
  identifier String   @db.VarChar(100)
  token      String   @db.VarChar(80)
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_token")
}

model Person {
  id         Int       @id @default(autoincrement())
  firstName  String    @db.VarChar(80)
  lastName   String    @db.VarChar(80)
  middleName String?   @db.VarChar(80)
  gender     Gender?
  birthdate  DateTime? @db.Date

  users     User[]
  employees Employee[]

  @@unique([firstName, lastName, birthdate])
  @@map("person")
}

model Employee {
  id           Int        @id @default(autoincrement())
  departmentId Int        @map("department_id")
  personId     Int        @map("person_id")

  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person       Person     @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([departmentId, personId])
  @@map("employee")
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(120)
  companyId   Int        @map("company_id")
  countryCode String     @db.Char(2) @map("country_code")

  company   Company    @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country   Country    @relation(fields: [countryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  employees Employee[]

  @@unique([name, companyId])
  @@map("department")
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(120) @unique
  countryCode String       @db.Char(2) @map("country_code")

  country     Country      @relation(fields: [countryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  departments Department[]

  @@map("company")
}

model Country {
  code String @id @db.Char(2)
  name String @db.VarChar(60)

  companies   Company[]
  departments Department[]

  @@map("country")
}

enum Role {
  ADMINISTRATOR
  MODERATOR
  USER

  @@map("role")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}
